name: Deployment

on:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

        # Build images and push to docker hub
      - name: Build and push dbimage
        uses: docker/build-push-action@v6
        with:
          context: ./db
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/dbimage:latest
            ${{ secrets.DOCKER_USERNAME }}/dbimage:${{ github.ref_name }}

      - name: Build and push backendimage
        uses: docker/build-push-action@v6
        with:
          context: ./backend/API
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/backendimage:latest
            ${{ secrets.DOCKER_USERNAME }}/backendimage:${{ github.ref_name }}

      - name: Build and push frontendimage
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/frontendimage:latest
            ${{ secrets.DOCKER_USERNAME }}/frontendimage:${{ github.ref_name }}

      - name: Build and push proxyimage
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/proxyimage:latest
            ${{ secrets.DOCKER_USERNAME }}/proxyimage:${{ github.ref_name }}

  deploy-db-to-production:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VM_IP_2 }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: ./app/docker-compose.yml
          target: /app/docker-compose.yml

      - name: Copy .env to server
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_PORT_CONTAINER: ${{ secrets.MYSQL_PORT_CONTAINER }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_SERVER: ${{ secrets.MYSQL_SERVER }}
          BACKEND_PORT: ${{ secrets.BACKEND_PORT }}
          FRONTEND_PORT: ${{ secrets.FRONTEND_PORT }}
          PROXY_PORT: ${{ secrets.PROXY_PORT }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_CONNECTION_STRING: ${{ secrets.REDIS_CONNECTION_STRING }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
        run: |
          # Create .env content
          echo "MYSQL_DATABASE=${MYSQL_DATABASE}" > .env
          echo "MYSQL_PORT=${MYSQL_PORT}" >> .env
          echo "MYSQL_PORT_CONTAINER=${MYSQL_PORT_CONTAINER}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" >> .env
          echo "MYSQL_USER=${MYSQL_USER}" >> .env
          echo "MYSQL_PASSWORD=${MYSQL_PASSWORD}" >> .env
          echo "MYSQL_SERVER=${MYSQL_SERVER}" >> .env
          echo "BACKEND_PORT=${BACKEND_PORT}" >> .env
          echo "FRONTEND_PORT=${FRONTEND_PORT}" >> .env
          echo "PROXY_PORT=${PROXY_PORT}" >> .env
          echo "REDIS_PORT=${REDIS_PORT}" >> .env
          echo "REDIS_CONNECTION_STRING=${REDIS_CONNECTION_STRING}" >> .env
          echo "JWT_KEY=${JWT_KEY}" >> .env
          scp -i ${{ secrets.SSH_KEY }} .env ${{ secrets.VM_USER }}@${{ secrets.VM_IP_2 }}:/app/.env
        shell: bash

      - name: SSH to server2 and deploy app
        uses: appleboy/ssh-action@v1.0.3
        with:
          ## TODO: Add your server IP, username and private key
          host: ${{ secrets.VM_IP_2 }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ./app
            echo "Pulling latest images from Docker Hub"
            docker compose --profile prod-db pull
            echo "Updating containers and removing old ones"
            docker compose --profile prod-db up -d --remove-orphans
            echo "Cleaning up unused containers and resources"
            docker system prune -f

  deploy-app-to-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-db-to-production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.VM_IP_1 }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: ./app/docker-compose.yml
          target: /app/docker-compose.yml

      - name: Copy .env to server
        env:
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_PORT_CONTAINER: ${{ secrets.MYSQL_PORT_CONTAINER }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_SERVER: ${{ secrets.MYSQL_SERVER }}
          BACKEND_PORT: ${{ secrets.BACKEND_PORT }}
          FRONTEND_PORT: ${{ secrets.FRONTEND_PORT }}
          PROXY_PORT: ${{ secrets.PROXY_PORT }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_CONNECTION_STRING: ${{ secrets.REDIS_CONNECTION_STRING }}
          JWT_KEY: ${{ secrets.JWT_KEY }}
        run: |
          # Create .env content
          echo "MYSQL_DATABASE=${MYSQL_DATABASE}" > .env
          echo "MYSQL_PORT=${MYSQL_PORT}" >> .env
          echo "MYSQL_PORT_CONTAINER=${MYSQL_PORT_CONTAINER}" >> .env
          echo "MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}" >> .env
          echo "MYSQL_USER=${MYSQL_USER}" >> .env
          echo "MYSQL_PASSWORD=${MYSQL_PASSWORD}" >> .env
          echo "MYSQL_SERVER=${MYSQL_SERVER}" >> .env
          echo "BACKEND_PORT=${BACKEND_PORT}" >> .env
          echo "FRONTEND_PORT=${FRONTEND_PORT}" >> .env
          echo "PROXY_PORT=${PROXY_PORT}" >> .env
          echo "REDIS_PORT=${REDIS_PORT}" >> .env
          echo "REDIS_CONNECTION_STRING=${REDIS_CONNECTION_STRING}" >> .env
          echo "JWT_KEY=${JWT_KEY}" >> .env
          scp -i ${{ secrets.SSH_KEY }} .env ${{ secrets.VM_USER }}@${{ secrets.VM_IP_1 }}:/app/.env
        shell: bash

      - name: SSH to server1 and deploy app
        uses: appleboy/ssh-action@v1.0.3
        with:
          ## TODO: Add your server IP, username and private key
          host: ${{ secrets.VM_IP_1 }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ./app
            echo "Pulling latest images from Docker Hub"
            docker compose --profile prod-app pull
            echo "Updating containers and removing old ones"
            docker compose --profile prod-app up -d --remove-orphans
            echo "Cleaning up unused containers and resources"
            docker system prune -f

  verify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-db-to-production, deploy-app-to-production]
    steps:
      - uses: actions/checkout@v4
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
      - name: Run API tests
        run: |
          postman collection run "12623662-324aa063-2fce-430b-aea3-c86a5a7a906c" -e "12623662-8ec22193-4472-49c3-9323-ddc5c03b384e" --env-var "baseUrl=${{ secrets.VM_IP_1 }}"
