user nginx;
worker_processes auto;

pid /run/nginx/nginx.pid;

events {
    worker_connections 1024;
}

http {

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                   '$status $body_bytes_sent "$http_referer" '
                   '"$http_user_agent" "$http_x_forwarded_for" $request_time "$request_body"';


    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    server {
        listen 80;
        server_name localhost;
        return 301 https://$host$request_uri;
    }


    server {
        listen 443 ssl;
        server_name localhost;

        ssl_certificate /etc/letsencrypt/live/devobs.dk/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/devobs.dk/privkey.pem;
		
		# Root directory for the server
#        root /usr/share/nginx/html;

        location / {
            proxy_pass http://frontend-container:3000;  # Assuming the container name and port
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # rewrite ^/test/(.*)$ /$1 break;  # Remove /legacy prefix when forwarding
        
        }
        location /api {
            proxy_pass http://backend-container:8080;  # Assuming the container name and port
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # rewrite ^/test/(.*)$ /$1 break;  # Remove /legacy prefix when forwarding

            # Ensure that the exact content type is passed to the backend from nginx
            proxy_set_header Content-Type $content_type;
            proxy_pass_request_headers on;
        }

    }
}
