name: Deployment

on:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

        # Build images and push to docker hub
      - name: Build and push dbimage
        uses: docker/build-push-action@v6
        with:
          context: ./db
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/dbimage:latest
            ${{ secrets.DOCKER_USERNAME }}/dbimage:${{ github.ref_name }}

      - name: Build and push backendimage
        uses: docker/build-push-action@v6
        with:
          context: ./backend/API
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/backendimage:latest
            ${{ secrets.DOCKER_USERNAME }}/backendimage:${{ github.ref_name }}

      - name: Build and push frontendimage
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/frontendimage:latest
            ${{ secrets.DOCKER_USERNAME }}/frontendimage:${{ github.ref_name }}

      - name: Build and push proxyimage
        uses: docker/build-push-action@v6
        with:
          context: ./nginx
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/proxyimage:latest
            ${{ secrets.DOCKER_USERNAME }}/proxyimage:${{ github.ref_name }}

  deploy-db-to-production:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_IP_1 }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/app"

      - name: SSH to server2 and deploy app
        uses: appleboy/ssh-action@v1.0.3
        with:
          ## TODO: Add your server IP, username and private key
          host: ${{ secrets.VM_IP_2 }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ./app
            echo "Pulling latest images from Docker Hub"
            docker compose --profile prod-db pull
            echo "Updating containers and removing old ones"
            docker compose --profile prod-db up -d --remove-orphans
            echo "Cleaning up unused containers and resources"
            docker system prune -f

  deploy-app-to-production:
    runs-on: ubuntu-latest
    needs: [build, deploy-db-to-production]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_IP_1 }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "docker-compose.yml"
          target: "~/app"

      - name: SSH to server1 and deploy app
        uses: appleboy/ssh-action@v1.0.3
        with:
          ## TODO: Add your server IP, username and private key
          host: ${{ secrets.VM_IP_1 }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd ./app
            echo "Pulling latest images from Docker Hub"
            docker compose --profile prod-app pull
            echo "Updating containers and removing old ones"
            docker compose --profile prod-app up -d --remove-orphans
            echo "Cleaning up unused containers and resources"
            docker system prune -f

  verify-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-db-to-production, deploy-app-to-production]
    steps:
      - uses: actions/checkout@v4
      - name: Install Postman CLI
        run: |
          curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh
      - name: Login to Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}
      - name: Run API tests
        run: |
          postman collection run "12623662-e0ffcb23-d02d-4b2f-89dd-a828110f538a" --env-var "baseUrl=${{ secrets.BASEURL}}"

      # Playwright E2E tests
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Playwright
        working-directory: frontend
        run: npx playwright install --with-deps

      - name: Run Playwright tests
        working-directory: frontend
        run: npx playwright test
        env:
          PLAYWRIGHT_TEST_BASE_URL: ${{ secrets.BASEURL }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: frontend/playwright-report
          retention-days: 7
